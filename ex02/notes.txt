$> ./PmergeMe 3 5 9 7 4
Before: 3 5 9 7 4
After: 3 4 5 7 9
Time to process a range of 5 elements with std::[..] : 0.00031 us
Time to process a range of 5 elements with std::[..] : 0.00014 us
$> ./PmergeMe `shuf -i 1-100000 -n 3000 | tr "\n" " "`
Before: 141 79 526 321 [...]
After: 79 141 321 526 [...]
Time to process a range of 3000 elements with std::[..] : 62.14389 us
Time to process a range of 3000 elements with std::[..] : 69.27212 us
$> ./PmergeMe "-1" "2"
Error
$> # For OSX USER:
$> ./PmergeMe `jot -r 3000 1 100000 | tr '\n' ' '`
[...]



----

dimension reduction by using blocks of numbers
note: the brackets are signif

block size 1

 5 6 7 2 8 3 1 11 9 10 4

steps: (imagined) paring them up, actually: making sure a_i < a_(i-1) for i even


block size 2

 {5 6} {2 7} {3 8} {1 11} {9 10} 4

block size 4

 {{2 7} {5 6}} {{1 11} {3 8}} {9 10}

 {2 7 5 6} {1 11 3 8} {9 10}
 {2 7 5 6} {1 11 3 8}

only two elements, base case

 {2 7 5 6} {1 11 3 8}

 swap

 {1 11 3 8} {2 7 5 6}

 sorted

walk up the chain
block size two:

 {1 11} {3 8} {2 7} {5 6} {9 10}

insert dangling 2-block using two cpms with {2 7} and {5 6}

 {1 11} {3 8} {2 7} {5 6} {9 10}

insert attached 2-block using two cmps
issue: I don't know how to record the relationship of "attached" or "dangling"
hold on
if I create a separate chain?


 {1 11} {2 7} {3 8} {5 6} {9 10}


eg:

 {1 11} {3 8} {2 7} {5 6} {9 10}

blindly:

 {1 11} {2 7} {5 6}

 insert last
 {1 11} {2 7} {5 6} {9 10}
 insert {3 8}
 {1 11} {2 7} {3 8} {5 6} {9 10}

sorted pairs


 {1 11} {2 7} {3 8} {5 6} {9 10} 4


 blind main chain:

  1 2 3 5 9 10

  insert 8 cmp with 9 and 5

  1 2 3 5 8 9 10

insert 6 cmp with 9 and 8

  1 2 3 5 6 8 9 10

insert 11, 7, and 4


-----------

8, 9, 1, 5, 17, 14, 11, 10, 18, 4, 7, 12, 21, 16, 3, 15, 20, 19, 2, 6, 13, 
is sorted input: 0
sort_v 
running sort_v_21
intermediate step:
8, 9, 1, 5, 14, 17, 10, 11, 4, 18, 7, 12, 16, 21, 3, 15, 19, 20, 2, 6, 13, sorted input:
1, 5, 8, 9, 10, 11, 14, 17, 4, 18, 7, 12, 3, 15, 16, 21, 2, 6, 19, 20, 13, 


----

20241027

51==34⋯⋯54==34--58==47⋯⋯58==19  

block_size = 1
trying to insert pos, block_ve: 1 and 34== OK

trying to insert pos, block_ve: 2 and 47== OK

error!

trying to insert pos, block_ve: 2 and 34== 

trying to insert pos, block_ve: 2 and 19==

34==19⋯⋯34==47--51==54⋯⋯58==58  

34==19⋯⋯34==47--51==54⋯⋯58==58  


51==34⋯⋯54==34--58==47⋯⋯58==19  
34==19⋯⋯34==47--51==54⋯⋯58==58 


51 54 58 58 
34 51 54 58 58 
34 47 51 54 58 58 

after instertion 34==34⋯⋯47==51--54==58⋯⋯58==

 34 47 54 58 


5 3 1 19 
3 47 
2 34 

----

now

after instertion 34==51⋯⋯54==58--58==

3 2 1 19 
2 51 
1 34 

this feels like a fuzzy bug




2 
35==34⋯⋯46==4--88==4⋯⋯88==62  

1 
4==4⋯⋯34==35--62==46⋯⋯88==88  


What could have helped me along the way?
Asserts: like tdd
Tests along the way
more planning


35 34 46 4 88 4 88 62

 35 46 88 88
 34 35 46 88 88

 4 4 34 35 46 62 88 88


 4 4 34 35 46 88 88


b_4 is 62 and inseted as the last element, is this right?

order: 1, 3, 2, (5), 4 done


_a_b_c_d_e_f_g_h


3 cmp
8 options

_1_2_3_4_5_6_7_8

4 is the start
2 is the step




35==34⋯⋯46==4--88==4⋯⋯88==62

 34 35 46 88 88
        4





